-- 트리거(trigger 테스팅)

--emp02삭제 생성 하고 트리거를 생성한다(입력이 될때마다 입력값을 출력해주는 트리거를 만든다)

drop table emp01;

create table emp01(
    EMPNO number(4) primary key,
    ENAME VARCHAR2(20),
    JOB VARCHAR2(50)
);
desc emp01;

create or replace trigger EMP01_TRIGGER
    AFTER INSERT ON EMP01
    FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.EMPNO || ',' || :NEW.ENAME|| '신입사원이 입사햇습니다.');
END;
/

INSERT INTO EMP01 VALUES( (SELECT NVL(MAX(EMPNO),0)+1 from EMP01),DBMS_RANDOM.STRING('U',4), 'IT_DEV');

create table sal01(
    SALNO number(4),
    SAL number,
    EMPNO number(4),
    constraint SAL01_PK PRIMARY KEY(SALNO),
    constraint SAL01_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO)
);
ALTER TABLE SAL01 ADD CONSTRAINT SAL01_SALNO_PK PRIMARY KEY(SALNO);
ALTER TABLE SAL01 ADD CONSTRAINT SAL01_EMPNO_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO);

SELECT * from user_cons_columns where table_name = 'sal01';

create sequence SAL01_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100000
NOCYCLE
CACHE 2;

create or replace trigger EMP01_TRIGGER2
AFTER INSERT ON EMP01
FOR EACH ROW
BEGIN
    INSERT INTO SAL01 VALUES(SAL01_SEQ.NEXTVAL,100000, :NEW.EMPNO);
    DBMS_OUTPUT.PUT_LINE(:NEW.EMPNO || '번호 사원이 SAL01 잘들어왔습니다.');
END;
/
INSERT INTO EMP01 VALUES( (SELECT NVL(max(EMPNO),0)+1 from EMP01), DBMS_RANDOM.STRING('U',4), 'IT_DEV');
SELECT * from EMP01;
SELECT * from SAL01;

-- EMP01 에서 사원의 정보를 제거했을떄 sal01 해당되는 사원이

create or replace trigger EMP01_TRIGGER3
    after delete on EMP01
    FOR EACH ROW
BEGIN
    -- SAL01 해당되는 사원의 정보가 삭제
    DELETE FROM SAL01 where EMPNO = :OLD.EMPNO;
    DBMS_OUTPUT.PUT_LINE(:OLD.EMPNO || '번호가 SAL01에서 삭제되었습니다.');
    END;
    /
    
    delete from emp01 where EMPNO = 4;
    SELECT * FROM EMP01;
    SELECT * FROM SAL01;
    
    CREATE TABLE SAL01(
    SALNO NUMBER(4),
    SAL NUMBER,
    EMPNO NUMBER(4)
    );
ALTER TABLE SAL01 ADD CONSTRAINTS SAL01_SALNO_PK PRIMARY KEY(SALNO);
ALTER TABLE SAL01 ADD CONSTRAINTS SAL01_EMPNO_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO);

CREATE TABLE PRODUCT(
    CODE CHAR(6),
    NAME  VARCHAR(12) NOT NULL,
    COMPANY VARCHAR(12),
    PRICE NUMBER(8),
    STOCK NUMBER DEFAULT 0
    );
ALTER TABLE PRODUCT ADD CONSTRAINTS PRODUCT_CODE_PK PRIMARY KEY(CODE);

INSERT INTO PRODUCT(CODE, NAME, COMPANY, PRICE)
    VALUES('A00001','세탁기', 'LG', 1500000);
INSERT INTO PRODUCT(CODE, NAME, COMPANY,PRICE)
    VALUES('A00002','컴퓨터', 'LG', 1000000);
INSERT INTO PRODUCT(CODE, NAME, COMPANY,PRICE)
    VALUES('A00003','냉장고', '삼성', 4500000);
CREATE TABLE RECEIVING(
    NO NUMBER(6),
    CODE CHAR(6),
    RDATE DATE,
    QTY NUMBER(6),
    PRICE NUMBER(8),
    AMOUNT NUMBER(8)
    );
ALTER TABLE RECEIVING ADD CONSTRAINTS RECEVING_NO_PK PRIMARY KEY(NO);
ALTER TABLE RECEIVING ADD CONSTRAINTS RECEVING_CODE_PK FOREIGN KEY(CODE) REFERENCES PRODUCT(CODE);

desc receiving;

CREATE or replace TRIGGER RECEIVING_TRIGGER01
    AFTER INSERT ON RECEIVING
    FOR EACH ROW
BEGIN
    UPDATE PRODUCT SET STOCK = STOCK + :NEW.QTY
    WHERE CODE = :NEW.CODE;
END;
/
-- 입고 수량을 등록한다.
INSERT INTO RECEIVING(NO,CODE, QTY, PRICE, AMOUNT)
VALUES((select NVL(MAX(NO),0)+1 from receiving), 'A00002', 10, 680000, 780000);

INSERT INTO RECEIVING(NO,CODE, QTY, PRICE, AMOUNT)
VALUES((select NVL(MAX(NO),0)+1 from receiving), 'A00003', 20, 3000000, 3000000);

INSERT INTO RECEIVING(NO,CODE, QTY, PRICE, AMOUNT)
VALUES((select NVL(MAX(NO),0)+1 from receiving), 'A00001', 30, 1000000, 1000000);

select *  from PRODUCT;
SELECT * FROM RECEIVING;

-- 갱신 트리거 만들기 입고 수량을 30 => 10 진행을 했는데 마지막 10개를 5개로 수정하면 
-- PRODUCT 재고 수량을 수정하는 트리거를 만들것

create or replace trigger receiving_trigger
    after update on receiving
    for each row
begin
    update product set STOck = STOCK + (-: OLD.QTY + :NEW.QTY)where CODE = :NEW.CODE;
end;
/
update RECEIVING SET QTY = 8, PRICE= 1000000, AMOUNT=1000000 where NO = 3;
rollback;
select * from product;